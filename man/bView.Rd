% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xvecView.R
\docType{bView}
\name{bView}
\alias{bView}
\title{Leaflet maps for big line and polygon data sets}
\usage{
bView(x, zcol = NULL, map = NULL, burst = FALSE,
  color = mapViewPalette(7), na.color = mapviewGetOption("nacolor"),
  values = NULL, map.types = mapviewGetOption("basemaps"), legend = FALSE,
  legend.opacity = 1, weight = 2, verbose = mapviewGetOption("verbose"),
  layer.name = deparse(substitute(x, env = parent.frame())), popup = NULL,
  ...)
}
\arguments{
\item{x}{\code{\link{sp}} an object one of : SpatialPointDataframe,SpatialPolygonsDataFrame,SpatialPolygons, SpatialLinesDataFrame, SpatialLines}

\item{color}{colors as:  (green,red,blue,teal,yellow,random) for the points/polygons/lines}

\item{map.types}{character spcifications for the base maps.
see \url{http://leaflet-extras.github.io/leaflet-providers/preview/}
for available options.}

\item{legend}{should a legend be plotted (not implemented yet)}

\item{legend.opacity}{opacity of the legend (not implemented yet)}

\item{...}{additional arguments passed on to repective functions.
See \code{\link{addRasterImage}}, \code{\link{addCircles}},
\code{\link{addPolygons}}, \code{\link{addPolylines}} for details}

\item{x}{a \code{\link{sp}} object}

\item{color}{color (palette) of the points/polygons/lines/pixels}

\item{layer.opacity}{opacity of the raster layer(s) (not implemented yet)}
}
\description{
bView is designed for rendering fairly big line and polyline vector data sets on base of leaflet maps without suffering the typical tough response times of the common leaflet maps. or points it is better to use \code{fpView}. It is utilising rtree, HTML5 canvas.
}
\note{
It is somehow important to understand the rendering concept. Due to the huge data sets the data is rendered using the canvas concept of HTML5. This is in questions of rendering speed very effecient but it is not easy to make the data responsive ( future plan is to implement canvas only concepts). For getting informations by click on the features one has  to zoom into the map until the features can be recognized and turn to magenta. At this point you have full access to the vectors. This is provided by using a rtree implementation. Not perfect but it works fully on the client side of the browser. The most time consuming part is the conversion of the data to the geojson format.
}
\examples{

### we need sp, raster, gdalUtils and rgdal ###
 library(sp)
 library(raster)
 library("rgdal")
 library("gdalUtils")
### for downloading and benchmarking
 library(downloader)
 library(profvis)

## load gadmCHE example data
 data(gadmCHE)

## map it with mapview
 mapview(gadmCHE)
## map it with bView
 bView(gadmCHE)

###  to get more suisse data we use OSM as provided by geofabrik
 download("http://download.geofabrik.de/europe/switzerland-latest.shp.zip",dest="switzerland.zip", mode = "wb")
 unzip ("switzerland.zip",exdir = "./")

## get information of landuse
 ogrInfo(".", "landuse")

## put it in sp object (doesn't matter what type)
 landuseCH<- readOGR(".","landuse")

## map it with mapview
 mapview(landuseCH)
## map it with bView
 bView(landuseCH)

## get information of waterways
 ogrInfo(".", "waterways")

## read it to a sp object
 waterwaysCH<- readOGR(".","waterways")

## map it with mapview
 mapview(waterwaysCH)
## map it with bView
 bView(waterwaysCH)
### some benchmarks
 system.time(mapview(gadmCHE))
 system.time(bView(gadmCHE))
 system.time(mapview(landuseCH))
 system.time(bView(landuseCH))
 system.time(mapview(waterwaysCH))
 system.time(bView(waterwaysCH))


}
\author{
Chris Reudenbach
}
\references{
bView is using concepts and code of Sumbera \url{https://gist.github.com/Sumbera/c67e5551b21c68dc8299} and Oscar Hidalgo \url{http://www.cyoarte.com/i+d/cphp/}
}

