% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/projView.R
\name{projView}
\alias{projView}
\title{maps projected local and remote tiles and vector data using leaflet}
\usage{
projView( x, zcol, color, na.color, map.types=NULL, cex, lwd, alpha, legend, legend.opacity, verbose, use.layer.names,layer.name,trim,popup)
}
\arguments{
\item{map.types}{local/remote map.types(s) pointing to the tiles to serve}

\item{layer.name}{label(s) corresponding to the tile layers}

\item{zoom}{maximum zoom level. corresponds with the available number of tile
levels -1}

\item{t_epsg}{e.g. \code{ urn:ogc:def:crs:EPSG::3031} or \code{EPSG:4326}
has to correspond with t_srs}

\item{t_srs}{valid proj4 string}

\item{resolution}{resolution of tiles for each zoom level}

\item{origin}{upper left corner of the raster tiles expressed in the new
coordinate system}

\item{tileSize}{sie of the tiles in pixel default is 256,}

\item{attribution}{of the layer see details}

\item{makTile}{default is FALSE if true you can chain makeTile to generate a
new tile before rendering it with \code{projView}}

\item{inputFile}{if \code{map.types{makeTile}} is TRUE you have to provide the
location of the file to be tiled}

\item{pathtoTile}{path to the tile folder. It is crated automatically and the
tiles are stored under \code{pathtoTile/tiles}}

\item{inputFileProj4}{valid proj4 string of the input file that is going to be
tiled}
}
\description{
projView maps existing local or online tiles. Optional it creates
 a local tile from a given GDAL file. object.
}
\details{
NOTE: tile serving usually works from the file system without
engaging a http server. Unfortunately this setting it is a pretty complex topic. First of
all it is usually not alowed to injure or load data via the browser due to
security issues. Additionally browsers do what they want and finally RStudio
also starts a webserver.... \cr So it is stringly recommended to use a local http
server to provide full access to local tiles and files. There are several
solutions within R. Most easiest way to do so is the package \code{\link{httd}}.\cr
Nevertheless it is much more convienient to install seperatly a http daemon. If you are not used to the topic the \href{http://twistedmatrix.com}{twistd} daemon  is a very good cross platform powerful, save and simple solution.
For some basic information and installation advices have a look at stackoverflow
\href{http://stackoverflow.com/questions/12905426/what-is-a-faster-alternative-to-pythons-simplehttpserver}{simplehttpserver}.


\code{vector of labels corresponding to the tile layers} vector of local or
remote raster tiles. at the moment only
\href{http://leafletjs.com/reference.html#tilelayer}{L.tileLayer} conform
adresses are supported.\cr \cr \code{layer.name} vector of labels corresponding
to the tile layers\cr\cr \code{t_epsg} projection code. best practise is
using the full \href{http://www.opengeospatial.org/ogcUrnPolicy}{OGC Urn
Policy} code (e.g. \code{ urn:ogc:def:crs:EPSG::3031}. In most cases you can
use the short version as provided by
\href{http://spatialreference.org}{spatialreference} e.g. \code{EPSG:4326},
\code{ESRI:37234}, \code{IAU2000:29918}\cr \cr

\code{t_srs} proj4 projection parameter string. best to retrieve both EPSG
and PROJ4 from \href{http://spatialreference.org}{spatialreference.org}\cr \cr
\code{resolution} string with the tile resolution/zoom level. It is the number
of zoom level + 1 multiplied by the tileSize. e.g. zoom = 5, tileSize = 256 =>
resolution = "8192,4096,2048,1024,512,256"\cr\cr \code{origin}  The upper left
corner of the tile image in projected coordinates. Webservices usually provide
the correct information but this can be tricky especially for complex
projections and local tiles. E.g. for polarstereographic projections you can
calculate it as follows: sqrt(abs(minx)**2+abs(miny)**2)/2*zoom\cr\cr
\code{attribution} a string with the map references. Please take care of
correct referencing of your data.\cr

\code{<a href='https://wiki.earthdata.nasa.gov/display/GIBS'> NASA EOSDIS
GIBS</a>}\cr
}
\examples{
\dontrun{
## requiered packages
 require(curl)
 require(servr)
 require(rgdal)
 require(gdalUtils)

 ## NOTE currently depreceated the directory that contains the valid tile subfolder structure with tiles to serve.
 # servr::httd("~/proj/Tiles",daemon=TRUE)
 system(paste0("twistd -no web --path=","~/proj/Tiles"),wait=FALSE)
 ## getting some data for the South from the great QGIS \\href{http://www.quantarctica.org/}{Quantartica project} of the \\href{http://www.npolar.no/en}{Norwegian Polar Institute}, ftp://ftp.uninett.no/pub/quantarctica/Quantarctica2.zip

 ## creating a tmp dir because this is a lot of data
 ## create a permanent tempdir
 tmpDir<-"~/tmp/data/quantartica"
 dir.create(tmpDir,recursive = TRUE, showWarnings = FALSE)
 ## download will take a while (~7 GB)
 curl_download(map.types="ftp://ftp.uninett.no/pub/quantarctica/Quantarctica2.zip", destfile=paste0(tmpDir,"/Quantarctica2.zip"),  quiet = FALSE, mode = "wb")
 ## unzip it
 unzip(paste0(tmpDir,"/Quantarctica2.zip"), exdir=tmpDir)
 ## and choose a data set of interest for tiling...
 localTileFile<-paste0(tmpDir,"/Quantarctica2/Basemap/Terrain/ETOPO1_DEM.tif")
 ## download some vector data
 ## get Greenland data from geofabrik
 curl_download("http://download.geofabrik.de/north-america/greenland-latest.shp.zip", destfile=paste0(tmpDir,"/geofabrikGREEN.zip"),  quiet = FALSE, mode = "wb")
 unzip(paste0(tmpDir,"/geofabrikGREEN.zip"), exdir=tmpDir)
 ## import natural
 naturalGREEN<- rgdal:::readOGR(dsn =path.expand(tmpDir), layer="natural")

 ## get Antartica data from geofabrik
 curl_download("http://download.geofabrik.de/antarctica-latest.shp.zip", destfile=paste0(tmpDir,"/geofabrikATA.zip"),  quiet = FALSE, mode = "wb")
 unzip(paste0(tmpDir,"/geofabrikATA.zip"), exdir=tmpDir)
 ## import natural for antartica
 naturalATA<- rgdal:::readOGR(dsn =path.expand(tmpDir), layer="natural")
 ## import stations vector data from Quantartica2 project
 stationsATA <-rgdal::readOGR(paste0(tmpDir,"/Quantarctica2/Basemap/Vector", "stations")

 ## first we have to define some online data providers. this is a bit tricky and yields sometimes just frustration...
 ## please have a look at the vignette for further explanations. In the example you'll find
 ## a typical WMS service and a typical OSM tile server. For your preferred list copy and paste
 ## the values of your tileserver/WMS service into the list elements.
 ## for convenience you also can add this new sublist to the master list for further use.

ovlLayer<-list( HAV=list(service="WMS", # typical WMS service
                         L.tileLayer.wms="http://geodatatest.havochvatten.se/geoservices/ows",
                         format="image/png",
                         layers=list(layer=list("hav-bakgrundskartor:hav-grundkarta")),
                         minZoom="0",
                         maxZoom="14",
                         continiuousWorld="true",
                         transparent="false",
                         attribution=" | &copy; <a href='https://www.havochvatten.se/kunskap-om-vara-vatten/kartor-och-geografisk-information/karttjanster.html'>Havs- och vattenmyndigheten (Swedish Agency for Marine and Water Management)</a> | Projection: <a href='http://spatialreference.org/ref/epsg/3006'> EPSG:3006</a>' | <a href='http://download.geofabrik.de/'> geofabrik/osm</a>",
                         params=list(t_epsg="EPSG:3575",
                                     t_srs="+proj=laea +lat_0=90 +lon_0=10 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs ",
                                     mapCenter=list(cLat="90",
                                                    cLon="90"),
                                     initialZoom="0",
                                     zoomLevels="12",
                                     resolution="8",
                                     ovlBounds=list(minx="-4462340.35076383",
                                                    miny="-4467019.64923622",
                                                    maxx="4467019.64923617",
                                                    maxy="4462340.35076378"),
                                     origin=list(olx="-4462340.35076383",
                                                 oly="4462340.35076378"),
                                     relUrl=""

                         )), # end of CAFF list

                CAFF=list(service="WMS", # typical WMS service templete
                          L.tileLayer.wms="http://dev.caff.is:8080/geoserver/ows",
                          format="image/png",
                          layers=list(layer=list("arctic_sdi:LandSurfaceTemperature","arctic_sdi:SeaSurfaceTemperature")),
                          minZoom="0",
                          maxZoom="12",
                          continiuousWorld="true",
                          transparent="true",
                          attribution=" | &copy; <a href=' http://www.arcticbiodiversity.is>Arctic Biodiversity Assessment</a> |<a href='http://download.geofabrik.de/'> geofabrik/osm</a> | Projection: <a href='http://spatialreference.org/ref/epsg/3575'> EPSG:3575</a>",
                          params=list(t_epsg="EPSG:3575",
                                      t_srs="+proj=laea +lat_0=90 +lon_0=10 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs ",
                                      mapCenter=list(cLat="90",
                                                     cLon="90"),
                                      initialZoom="0",
                                      zoomLevels="12",
                                      resolution="8",
                                      ovlBounds=list(minx="-4462340.35076383",
                                                     miny="-4467019.64923622",
                                                     maxx="4467019.64923617",
                                                     maxy="4462340.35076378"),
                                      origin=list(olx="-4462340.35076383",
                                                  oly="4462340.35076378"),
                                      relUrl=""

                          )), # end of CAFF list
                # here we start a new map.types input list this time for OSM tiles
                NASA=list(service="NASA",
                          L.tileLayer="https://map1{s}.vis.earthdata.nasa.gov/wmts-antarctic/",
                          layer=list(layer=list(list("BlueMarble_ShadedRelief_Bathymetry", path=list("EPSG3031_500m")),
                                                list("AMSR2_Sea_Ice_Brightness_Temp_6km_89H",path= list("2014-02-04",
                                                                                                        "EPSG3031_1km")),
                                                list(" MODIS_Terra_Snow_Cover",path= list("2014-02-04",
                                                                                          "EPSG3031_1km"))
                          )),
                          format="image/jpg",
                          tileSize="512",
                          subdomains="abc",
                          noWrap ="true",
                          attribution="<a href='https://wiki.earthdata.nasa.gov/display/GIBS'> NASA EOSDIS GIBS</a> &nbsp;|| &nbsp; <a href='https://github.com/kartena/Proj4Leaflet'> Proj4Leaflet</a> | Projection: <a href='http://spatialreference.org/ref/epsg/wgs-84-antarctic-polar-stereographic/'> EPSG3031</a>",
                          params=list(t_epsg="EPSG:3031",
                                      t_srs="+proj=stere +lat_0=-90 +lat_ts=-71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs",
                                      mapCenter=list(cLat="-90",
                                                     cLon="0"),
                                      initialZoom="0",
                                      zoomLevels="5",
                                      resolution="256",
                                      ovlBounds=list(minx="-4194304",
                                                     miny="-4194304",
                                                     maxx="4194304",
                                                     maxy="4194304"),
                                      origin=list(olx="-4194304",
                                                  oly="4194304"),
                                      relUrl=""

                          )) # end of NASA list
) # end of total list



### now let's start mapping
#load the stations and the defined NASA Layers
projView(stations, , map.types= "ovlLayer$NASA")
# use the visEarthPole function as a plugin
projView(stations, map.types= "ovlLayer$NASA",
                  internalList =TRUE,
                  externalList = c("arctic-nasa","visEarthPole(groupList='1000',dateString='2014-02-04',createList = TRUE)"))
# it also works for the North Pole
# we use greenland and data from the CAFF
mapview::projView(naturalGreen, , map.types= "ovlLayer$CAFF")
# again Greenland with online tiles from HAV
mapview::projView(naturalGreen, , map.types= "ovlLayer$HAV")

## reproject it to EPSG:3995
ovlLayer$HAV$params$t_srs <- "+proj=stere +lat_0=90 +lat_ts=71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"
ovlLayer$HAV$params$t_epsg <- "EPSG:3995"
mapview::projView(naturalGreen, , map.types= "ovlLayer$HAV")

# move center
ovlLayer$HAV$params$mapCenter$cLon="70"
ovlLayer$HAV$params$mapCenter$cLat="15"
mapview::projView(naturalGreen, , map.types= "ovlLayer$HAV")



}
}
\author{
Chris Reudenbach
}

