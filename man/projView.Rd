% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/projView.R
\name{projView}
\alias{projView}
\title{projView generates projected leaflet maps using (local) or remote tiles and arbitrary vector for obverlaying.}
\usage{
projView( x, zcol, color, na.color, map.types, cex, lwd, alpha, legend, legend.opacity, verbose, use.layer.names,layer.name,popup,internalList, externalList)
}
\arguments{
\item{x}{a \code{\link{sp}}* object}

\item{zcol}{attribute name(s) or column number(s) in attribute table
of the column(s) to be rendered}

\item{color}{color (palette) for points/polygons/lines}

\item{na.color}{color for missing values}

\item{map.types}{an optionallist of map tiles see \link{details}}

\item{cex}{attribute name(s) or column number(s) in attribute table
of the column(s) to be used for defining the size of circles}

\item{lwd}{line width}

\item{alpha}{opacity of the lines or points}

\item{legend}{should a legend be plotted}

\item{legend.opacity}{opacity of the legend}

\item{verbose}{should some details be printed during the process}

\item{use.layer.names}{should layer names of the Raster* object be used?}

\item{layer.name}{the name of the overlay layer to be shown on the map}

\item{popup}{a character vector of the HTML content for the popups. See
\code{\link{addControl}} for details.}

\item{internalList}{default is FALSE if set to TRUE it is possible to pipe a command with externalList}

\item{externalList}{list of two strings  first item is the keyword for the kind of data (currently just "arctic-nasa" is implemented, second is the R command to be evaluated. example: externalList = c("arctic-nasa","visEarthPole(groupList='1000',dateString='2014-02-04',createList = TRUE)"))}

\item{values}{a vector of values for the visualisation of the layers.
Per default these are calculated based on the supplied raster* object.}

\item{map.types}{character spcifications for the base maps.
see \url{http://leaflet-extras.github.io/leaflet-providers/preview/}
for available options.}
}
\description{
projView maps existing local or online tiles in the choosen target projection. The first raster tile is taken for the default background.
}
\details{
For all other information  please have a look at the vignette or at \href{http://gisma.github.io/projView/projView1_0_9.html#some-examples}{projView}
}
\examples{
\dontrun{
##  packages
 require(curl)
 require(rgdal)

 ## load data of the arctic stations
 data("campsQ2")

 ## download Greenland data from geofabrik
 curl_download("http://download.geofabrik.de/north-america/greenland-latest.shp.zip", destfile=paste0(tmpDir,"/geofabrikGREEN.zip"),  quiet = FALSE, mode = "wb")
 unzip(paste0(tmpDir,"/geofabrikGREEN.zip"), exdir=tmpDir)
 ## import natural
 naturalGREEN<- rgdal:::readOGR(dsn =path.expand(tmpDir), layer="natural")

 ## first we have to define some online data providers. this is a bit tricky and yields sometimes just frustration...
 ## please have a look at the vignette for further explanations. In the example you'll find
 ## a typical WMS service and a typical OSM tile server. For your preferred list copy and paste
 ## the values of your tileserver/WMS service into the list elements.
 ## for convenience you also can add this new sublist to the master list for further use.

ovlLayer<-list( HAV=list(service="WMS", # typical WMS service
                         L.tileLayer.wms="http://geodatatest.havochvatten.se/geoservices/ows",
                         format="image/png",
                         layers=list(layer=list("hav-bakgrundskartor:hav-grundkarta")),
                         minZoom="0",
                         maxZoom="14",
                         continiuousWorld="true",
                         transparent="false",
                         attribution=" | &copy; <a href='https://www.havochvatten.se/kunskap-om-vara-vatten/kartor-och-geografisk-information/karttjanster.html'>Havs- och vattenmyndigheten (Swedish Agency for Marine and Water Management)</a> | Projection: <a href='http://spatialreference.org/ref/epsg/3006'> EPSG:3006</a>' | <a href='http://download.geofabrik.de/'> geofabrik/osm</a>",
                         params=list(t_epsg="EPSG:3575",
                                     t_srs="+proj=laea +lat_0=90 +lon_0=10 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs ",
                                     mapCenter=list(cLat="90",
                                                    cLon="90"),
                                     initialZoom="0",
                                     zoomLevels="12",
                                     resolution="8",
                                     ovlBounds=list(minx="-4462340.35076383",
                                                    miny="-4467019.64923622",
                                                    maxx="4467019.64923617",
                                                    maxy="4462340.35076378"),
                                     origin=list(olx="-4462340.35076383",
                                                 oly="4462340.35076378"),
                                     relUrl=""

                         )), # end of CAFF list

                CAFF=list(service="WMS", # typical WMS service templete
                          L.tileLayer.wms="http://dev.caff.is:8080/geoserver/ows",
                          format="image/png",
                          layers=list(layer=list("arctic_sdi:LandSurfaceTemperature","arctic_sdi:SeaSurfaceTemperature")),
                          minZoom="0",
                          maxZoom="12",
                          continiuousWorld="true",
                          transparent="true",
                          attribution=" | &copy; <a href=' http://www.arcticbiodiversity.is>Arctic Biodiversity Assessment</a> |<a href='http://download.geofabrik.de/'> geofabrik/osm</a> | Projection: <a href='http://spatialreference.org/ref/epsg/3575'> EPSG:3575</a>",
                          params=list(t_epsg="EPSG:3575",
                                      t_srs="+proj=laea +lat_0=90 +lon_0=10 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs ",
                                      mapCenter=list(cLat="90",
                                                     cLon="90"),
                                      initialZoom="0",
                                      zoomLevels="12",
                                      resolution="8",
                                      ovlBounds=list(minx="-4462340.35076383",
                                                     miny="-4467019.64923622",
                                                     maxx="4467019.64923617",
                                                     maxy="4462340.35076378"),
                                      origin=list(olx="-4462340.35076383",
                                                  oly="4462340.35076378"),
                                      relUrl=""

                          )), # end of CAFF list
                # here we start a new map.types input list this time for OSM tiles
                NASA=list(service="NASA",
                          L.tileLayer="https://map1{s}.vis.earthdata.nasa.gov/wmts-antarctic/",
                          layer=list(layer=list(list("BlueMarble_ShadedRelief_Bathymetry", path=list("EPSG3031_500m")),
                                                list("AMSR2_Sea_Ice_Brightness_Temp_6km_89H",path= list("2014-02-04",
                                                                                                        "EPSG3031_1km")),
                                                list(" MODIS_Terra_Snow_Cover",path= list("2014-02-04",
                                                                                          "EPSG3031_1km"))
                          )),
                          format="image/jpg",
                          tileSize="512",
                          subdomains="abc",
                          noWrap ="true",
                          attribution="<a href='https://wiki.earthdata.nasa.gov/display/GIBS'> NASA EOSDIS GIBS</a> &nbsp;|| &nbsp; <a href='https://github.com/kartena/Proj4Leaflet'> Proj4Leaflet</a> | Projection: <a href='http://spatialreference.org/ref/epsg/wgs-84-antarctic-polar-stereographic/'> EPSG3031</a>",
                          params=list(t_epsg="EPSG:3031",
                                      t_srs="+proj=stere +lat_0=-90 +lat_ts=-71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs",
                                      mapCenter=list(cLat="-90",
                                                     cLon="0"),
                                      initialZoom="0",
                                      zoomLevels="5",
                                      resolution="256",
                                      ovlBounds=list(minx="-4194304",
                                                     miny="-4194304",
                                                     maxx="4194304",
                                                     maxy="4194304"),
                                      origin=list(olx="-4194304",
                                                  oly="4194304"),
                                      relUrl=""

                          )) # end of NASA list
) # end of total list



### now let's start mapping
#load the stations and the defined NASA Layers
projView(campsQ2, , map.types= "ovlLayer$NASA")

### use the visEarthPole function as a plugin
projView(campsQ2, map.types= "ovlLayer$NASA",
                  internalList =TRUE,
                  externalList = c("arctic-nasa","visEarthPole(groupList='1000',dateString='2014-02-04',createList = TRUE)"))
### it also works for the North Pole
### use Greenland and online tiles from the CAFF
mapview::projView(naturalGREEN, , map.types= "ovlLayer$CAFF")

# again Greenland with online tiles from HAV
mapview::projView(naturalGREEN, , map.types= "ovlLayer$HAV")

## reproject HAV and Greenland to EPSG:3995
ovlLayer$HAV$params$t_srs <- "+proj=stere +lat_0=90 +lat_ts=71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"
ovlLayer$HAV$params$t_epsg <- "EPSG:3995"
mapview::projView(naturalGREEN, , map.types= "ovlLayer$HAV")

# move center
ovlLayer$HAV$params$mapCenter$cLon="70"
ovlLayer$HAV$params$mapCenter$cLat="15"
mapview::projView(naturalGreen, , map.types= "ovlLayer$HAV")



}
}
\author{
Chris Reudenbach
}
\references{
\href{https://wiki.earthdata.nasa.gov/display/GIBS}{NASA EOSDIS GIBS}\cr
\href{http://kartena.github.io/Proj4Leaflet/}{Proj4Leaflet}
}

