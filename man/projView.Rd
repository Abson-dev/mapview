% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/projView.R
\name{projView}
\alias{projView}
\title{create projected local tiles for leaflet and maps it}
\usage{
projView(url="http://localhost:4321/{z}/{x}/{y}.png")
}
\arguments{
\item{url}{local/remote url(s) pointing to the tiles to serve}

\item{urlLabel}{label(s) corresponding to the tile layers}

\item{zoom}{maximum zoom level. corresponds with the available number of tile
levels -1}

\item{epsgCode}{e.g. \code{ urn:ogc:def:crs:EPSG::3031} or \code{EPSG:4326}
has to correspond with proj4Str}

\item{proj4Str}{valid proj4 string}

\item{tileSize}{sie of the tiles in pixel default is 256,}

\item{resolution}{resolution of tiles for each zoom level}

\item{origin}{upper left corner of the raster tiles expressed in the new
coordinate system}

\item{attribution}{of the layer see details}

\item{inputFile}{if \code{url{makeTile}} is TRUE you have to provide the location of the file to be tiled}

\item{pathtoTile}{path to the tile folder. It is crated automatically and the tiles are stored under \code{pathtoTile/tiles}}

\item{inputFileProj4}{valid proj4 string of the input file that is going to be tiled}

\item{makTile}{default is FALSE if true you can chain makeTile to generate a new tile before rendering it with \code{projView}}
}
\description{
projView creates and maps a tiles from a given raster or GDAL
 object.
}
\details{
\code{vector of labels corresponding to the tile layers} vector of local or remote raster tiles. at the moment only
\href{http://leafletjs.com/reference.html#tilelayer}{L.tileLayer} conform
adresses are supported.\cr \cr
\code{urlLabel} vector of labels corresponding to the tile layers\cr\cr
\code{epsgCode} projection code. best practise is using the
full \href{http://www.opengeospatial.org/ogcUrnPolicy}{OGC Urn Policy} code
(e.g. \code{ urn:ogc:def:crs:EPSG::3031}. In most cases you can use the short
version as provided by \href{http://spatialreference.org}{spatialreference}
e.g. \code{EPSG:4326}, \code{ESRI:37234}, \code{IAU2000:29918}\cr \cr

\code{proj4Str} proj4 projection parameter string. best to retrieve both EPSG and PROJ4 from
\href{http://spatialreference.org}{spatialreference.org}\cr \cr
\code{resolution}
string with the tile resolution/zoom level. It is the number of zoom level + 1
multiplied by the tileSize. e.g. zoom = 5, tileSize = 256 => resolution =
"8192,4096,2048,1024,512,256"\cr\cr
\code{origin}  The upper left corner of the tile image in projected coordinates. Webservices usually provide the
correct information but this can be tricky especially for complex projections
and local tiles. E.g. for polarstereographic projections you can calculate it
as follows: sqrt(abs(minx)**2+abs(miny)**2)/2*zoom\cr\cr
\code{attribution} a string
with the map references. Please take care of correct referencing of your data.\cr

\code{<a href='https://wiki.earthdata.nasa.gov/display/GIBS'> NASA EOSDIS GIBS</a>}\cr

There tons of security issues one have to regard if reading locals files with a browser. To avoid this complications it makes sense to serve the local tiles via a http daemon. The most easiest way for common purposes is to use a R internal server like\code{\link{servr}}\cr
}
\examples{
\dontrun{
## requiered packages
 require(curl)
 require(servr)
 require(rgdal)
 require(gdalUtils)

 ### like all the time we need some data in this case from the great QGIS \\href{http://www.quantarctica.org/}{Quantartica project} of the \\href{http://www.npolar.no/en}{Norwegian Polar Institute}, ftp://ftp.uninett.no/pub/quantarctica/Quantarctica2.zip

 ## creating a tmp dir because this is a lot of data
 ## create a permanent tempdir
 tmpDir<-"~/tmp/data/quantartica"
 dir.create(tmpDir,recursive = TRUE, showWarnings = FALSE)
 ## download will take a while (~7 GB)
 curl_download(url="ftp://ftp.uninett.no/pub/quantarctica/Quantarctica2.zip", destfile=paste0(tmpDir,"/Quantarctica2.zip"),  quiet = FALSE, mode = "wb")

 ## unzip it
 unzip(paste0(tmpDir,"/Quantarctica2.zip"), exdir=tmpDir)

 ## and choose a data set of interest for tiling...
 localFile<-paste0(tmpDir,"/Quantarctica2/Basemap/Terrain/ETOPO1_DEM.tif")

 ## serve the directory that contains the valid tile subfolder structure with tiles to serve.
 servr::httd("~/proj/makeTile/etopo/tiles",daemon=TRUE)

 ## the default usage...
 projView(url = c("http://localhost:4321/{z}/{x}/{y}.png","http://localhost:4321/{z}/{x}/{y}.png"),
           urlLabel = c("BaseTile","overlaytile"),,
           zoom = 5,
           epsgCode = "urn:ogc:def:crs:EPSG::3031",
           proj4Str = "+proj=stere +lat_0=-90 +lat_ts=-71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs",
           tileSize = 256,
           resolution = "[8192,4096,2048,1024,512,256]",
           origin = "[-639860.046230607,639860.046230607]",
           bounds = "[-4524493,-4524493],[4524493,4524493]",
           attribution = "<a href='https://github.com/kartena/Proj4Leaflet'> Proj4Leaflet</a> | Projection: <a href='http://spatialreference.org/ref/epsg/wgs-84-antarctic-polar-stereographic/'> EPSG:3031</a> | <a href='www.quantarctica.org'>Norwegian Polar Institute</a>")

 ## ...yields the same result as
 projView(url = c("http://localhost:4321/{z}/{x}/{y}.png","http://localhost:4321/{z}/{x}/{y}.png"),
           urlLabel = c("BaseTile","overlaytile"),,
           zoom = 5)

 ## pipe the process of tiling and viewing with makTile = TRUE,
 projView( makeTile = TRUE,
             inputFile = localFile,
             pathtoTile = "~/proj/Tiles/antartica/etopo1",
             inputFileProj4 = "+proj=stere +lat_0=-90 +lat_ts=-71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs")
}
}
\author{
Chris Reudenbach
}

