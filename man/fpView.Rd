% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fpView.R
\docType{fpView}
\name{fpView}
\alias{fpView}
\title{Leaflet maps for big data}
\usage{
fpView(data, col = "rgb", width = NULL, height = NULL, zcol = NULL,
  map = NULL, burst = FALSE, radius = 10, map.types = c("OpenStreetMap",
  "Esri.WorldImagery", "Thunderforest.Landscape"), legend = FALSE,
  legend.opacity = 1, verbose = mapviewOptions(console = FALSE)$verbose,
  layer.name = deparse(substitute(data, env = parent.frame())),
  popup = NULL, ...)
}
\arguments{
\item{data}{a \code{\link{sp}} SpatialPointDataframe object (currently only)}

\item{width}{a valid CSS width}

\item{height}{a valid CSS width}

\item{zcol}{attribute name(s) or column number(s) in attribute table
of the column(s) to be rendered (up to now only numeric is supported)}

\item{burst}{whether to show all (TRUE) or only one (FALSE) layers}

\item{radius}{attribute name(s) or column number(s) in attribute table
of the column(s) to be used for defining the size of circles}

\item{color}{colors as:  (green,red,blue,teal,yellow,random) for the points/polygons/lines}
}
\description{
fpView is a first prototype for rendering big data (points) on base of leaflet maps utilizing webGL and htmlwidgets.

This is a modified and adapted implementation of \url{https://github.com/robertleeplummerjr/Leaflet.glify}
}
\note{
It is import to understand that the accurracy of the rendering is about
 1.1 m at the equator up to 20 cm around 75Â°. You will get an arbitrary result if the
  accurracy of your points requires more than 5 decimal digits.
}
\examples{

### we need sp and raster ###
 library(sp)
 library(raster)
 library(ggplot2)
 library(profvis)

# take the meuse data
 data(meuse)
 coordinates(meuse) <- ~x+y
 proj4string(meuse) <- CRS("+init=epsg:28992")
 meuse <- spTransform(meuse,CRS("+init=epsg:3857"))

# map it with mapview
 mapview(meuse)

# map it with fpView
 fpView(data = meuse,col = "random")

### some benchmarks
 system.time(mapview(meuse))
 system.time(fpView(data = meuse, col = "random"))

### Now we go a bit bigger

# get the diamonds data
 big <- diamonds[rep(seq_len(nrow(diamonds)), 1),]
 big$cut <- as.character(big$cut)
 big$color <- as.character(big$color)
 big$clarity <- as.character(big$clarity)
# provide some random positions
 big$x <- rnorm(nrow(big), 10, 3)
 big$y <- rnorm(nrow(big), 50, 3)

 coordinates(big) <- ~x+y
 proj4string(big) <- CRS("+init=epsg:4326")

# map it with pure mapview
 mapview(big, color='blue')

# map it with fastmap
 fpView(data = big, col='blue')

### some benchmarks
 system.time(mapview(big, color='blue'))
 system.time(fpView(data = big, col = "blue"))

### up to about 5 mio points
 big <- diamonds[rep(seq_len(nrow(diamonds)), 94),]
 big$cut <- as.character(big$cut)
 big$color <- as.character(big$color)
 big$clarity <- as.character(big$clarity)

 big$x <- rnorm(nrow(big), 10, 3)
 big$y <- rnorm(nrow(big), 50, 3)

 coordinates(big) <- ~x+y
 proj4string(big) <- CRS("+init=epsg:4326")

# map it NOT with leaflet but with fpView
 fpView(data = big, col = "blue")

### some benchmarks
# random point colors is slower
 system.time(fpView(data = big, col = "random"))
# than unique colors
 system.time(fpView(data = big, col = "blue"))
# profVising it
 profvis(fpView(data = big, col = "blue"))

}
\author{
Chris Reudenbach
}

