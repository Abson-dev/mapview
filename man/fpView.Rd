% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/miscView.R
\docType{fpView}
\name{fpView}
\alias{fpView}
\title{Leaflet maps for big point data}
\usage{
fpView(x, zcol = NULL, map = NULL, burst = FALSE,
  color = mapViewPalette(7), na.color = mapviewGetOption("nacolor"),
  values = NULL, map.types = mapviewGetOption("basemaps"), legend = FALSE,
  legend.opacity = 1, weight = 2, verbose = mapviewGetOption("verbose"),
  layer.name = deparse(substitute(x, env = parent.frame())), popup = NULL,
  ...)
}
\arguments{
\item{x}{\code{\link{sp}} SpatialPointDataframe object}

\item{color}{colors as:  (green,red,blue,teal,yellow,random) for the points/polygons/lines}

\item{map.types}{character spcifications for the base maps.
see \url{http://leaflet-extras.github.io/leaflet-providers/preview/}
for available options.}

\item{legend}{should a legend be plotted (not implemented yet)}

\item{legend.opacity}{opacity of the legend (not implemented yet)}

\item{...}{additional arguments passed on to repective functions.
See \code{\link{addRasterImage}}, \code{\link{addCircles}},
\code{\link{addPolygons}}, \code{\link{addPolylines}} for details}

\item{x}{a \code{\link{raster}}* object}

\item{color}{color (palette) of the points/polygons/lines/pixels}

\item{layer.opacity}{opacity of the raster layer(s) (not implemented yet)}
}
\description{
fpView is designed for rendering fairly big point vector data sets on base of leaflet maps without suffering the typical tough response times of the common leaflet maps. It utilises HTML5 canvas and webGL technics.
}
\note{
It is import to understand that the accurracy of the rendering is about
 1.1 m at the equator up to 20 cm around 75Â°. You will get an arbitrary result if the
  accurracy of your points requires more than 5 decimal digits.
}
\examples{
### we need sp and raster ###
 library(sp)
 library(raster)
 library(ggplot2)
 library(profvis)

### take the meuse data
 data(meuse)
 coordinates(meuse) <- ~x+y
 proj4string(meuse) <- CRS("+init=epsg:28992")
 meuse <- spTransform(meuse,CRS("+init=epsg:3857"))

### map it with mapview
 mapview(meuse)

### map it with fpView
 fpView(meuse,color = "random")

### some benchmarks
 system.time(mapview(meuse))
 system.time(fpView(meuse, color = "random"))

### Now we go a bit bigger

### get the diamonds data
 big <- diamonds[rep(seq_len(nrow(diamonds)), 1),]
 big$cut <- as.character(big$cut)
 big$color <- as.character(big$color)
 big$clarity <- as.character(big$clarity)

### provide some random positions
 big$x <- rnorm(nrow(big), 10, 3)
 big$y <- rnorm(nrow(big), 50, 3)
 coordinates(big) <- ~x+y
 proj4string(big) <- CRS("+init=epsg:4326")

### map it with pure mapview
 mapview(big, color = 'blue')

### map it with fastmap
 fpView(big, color = 'blue')

### some benchmarks
 system.time(mapview(big, color = 'blue'))
 system.time(fpView(big, color = 'blue'))

### up to about 5 mio points
 big <- diamonds[rep(seq_len(nrow(diamonds)), 94),]
 big$cut <- as.character(big$cut)
 big$color <- as.character(big$color)
 big$clarity <- as.character(big$clarity)
 big$x <- rnorm(nrow(big), 10, 3)
 big$y <- rnorm(nrow(big), 50, 3)
 coordinates(big) <- ~x+y
 proj4string(big) <- CRS("+init=epsg:4326")

### map it with fpView
 fpView(big, color = "blue")

### some benchmarks
# random point colors is slower
 system.time(fpView(big, color = "random"))
# than unique colors
 system.time(fpView(big, color = "blue"))
# profVising it
 profvis(fpView(big, color = "blue"))

}
\author{
Chris Reudenbach
}
\references{
fpView is using a modified and adapted implementation of : \url{https://github.com/robertleeplummerjr/Leaflet.glify}
}

