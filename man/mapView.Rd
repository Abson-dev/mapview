% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/mapView.R
\docType{methods}
\name{mapView}
\alias{mapView}
\alias{mapView,RasterBrick-method}
\alias{mapView,RasterLayer-method}
\alias{mapView,RasterStack-method}
\alias{mapView,Satellite-method}
\alias{mapView,SpatialLines-method}
\alias{mapView,SpatialLinesDataFrame-method}
\alias{mapView,SpatialPixelsDataFrame-method}
\alias{mapView,SpatialPoints-method}
\alias{mapView,SpatialPointsDataFrame-method}
\alias{mapView,SpatialPolygons-method}
\alias{mapView,SpatialPolygonsDataFrame-method}
\alias{mapView,missing-method}
\title{view spatial objects interactively}
\usage{
\S4method{mapView}{RasterLayer}(x, map = NULL, maxpixels = 5e+05,
  cols = mapViewPalette(7), na.color = "transparent",
  use.layer.names = TRUE, values = NULL, map.types = c("OpenStreetMap",
  "Esri.WorldImagery"), layer.opacity = 0.8, legend = TRUE,
  legend.opacity = 1, trim = TRUE, verbose = FALSE, ...)

\S4method{mapView}{RasterStack}(x, map = NULL, maxpixels = 5e+05,
  cols = mapViewPalette(7), na.color = "transparent", values = NULL,
  map.types = c("OpenStreetMap", "Esri.WorldImagery"), layer.opacity = 0.8,
  legend = TRUE, legend.opacity = 1, trim = TRUE, verbose = FALSE, ...)

\S4method{mapView}{RasterBrick}(x, map = NULL, maxpixels = 5e+05,
  cols = mapViewPalette(7), na.color = "transparent", values = NULL,
  map.types = c("OpenStreetMap", "Esri.WorldImagery"), layer.opacity = 0.8,
  legend = TRUE, legend.opacity = 1, trim = TRUE, verbose = FALSE, ...)

\S4method{mapView}{Satellite}(x, ...)

\S4method{mapView}{SpatialPixelsDataFrame}(x, zcol = NULL, map = NULL,
  maxpixels = 5e+05, cols = mapViewPalette(7), na.color = "transparent",
  values = NULL, map.types = c("OpenStreetMap", "Esri.WorldImagery"),
  layer.opacity = 0.8, legend = TRUE, legend.opacity = 1,
  verbose = FALSE, ...)

\S4method{mapView}{SpatialPointsDataFrame}(x, zcol = NULL, map = NULL,
  burst = FALSE, cols = mapViewPalette(7), na.color = "transparent",
  radius = NULL, map.types = c("OpenStreetMap", "Esri.WorldImagery"),
  layer.opacity = 0.8, legend = TRUE, legend.opacity = 1,
  verbose = FALSE, ...)

\S4method{mapView}{SpatialPoints}(x, map = NULL, na.color = "transparent",
  map.types = c("OpenStreetMap", "Esri.WorldImagery"), layer.opacity = 0.8,
  verbose = FALSE, ...)

\S4method{mapView}{SpatialPolygonsDataFrame}(x, zcol = NULL, map = NULL,
  burst = FALSE, cols = mapViewPalette(7), na.color = "transparent",
  values = NULL, map.types = c("OpenStreetMap", "Esri.WorldImagery"),
  layer.opacity = 0.8, legend = TRUE, legend.opacity = 1, weight = 2,
  verbose = FALSE, ...)

\S4method{mapView}{SpatialPolygons}(x, map = NULL, na.color = "transparent",
  map.types = c("OpenStreetMap", "Esri.WorldImagery"), layer.opacity = 0.8,
  weight = 2, verbose = FALSE, ...)

\S4method{mapView}{SpatialLinesDataFrame}(x, zcol = NULL, map = NULL,
  burst = FALSE, cols = mapViewPalette(7), na.color = "transparent",
  values = NULL, map.types = c("OpenStreetMap", "Esri.WorldImagery"),
  layer.opacity = 0.8, legend = TRUE, legend.opacity = 1, weight = 2,
  verbose = FALSE, ...)

\S4method{mapView}{SpatialLines}(x, map = NULL, na.color = "transparent",
  map.types = c("OpenStreetMap", "Esri.WorldImagery"), layer.opacity = 0.8,
  weight = 2, verbose = FALSE, ...)

\S4method{mapView}{missing}(map.types = c("OpenStreetMap",
  "Esri.WorldImagery"), easter.egg = FALSE)
}
\arguments{
\item{x}{a \code{\link{raster}}* object}

\item{map}{an optional existing map to be updated/added to}

\item{maxpixels}{integer > 0. Maximum number of cells to use for the plot.
If maxpixels < \code{ncell(x)}, sampleRegular is used before plotting.}

\item{cols}{color palette for the layers}

\item{na.color}{color for missing values}

\item{use.layer.names}{should layer names of the Raster* object be used?}

\item{values}{a vector of values for the visualisation of the layers.
Per default these are calculated based on the supplied raster* object.}

\item{map.types}{character spcifications for the base maps.
see \url{http://leaflet-extras.github.io/leaflet-providers/preview/}
for available options.}

\item{layer.opacity}{opacity of the layers}

\item{legend}{should a legend be plotted}

\item{legend.opacity}{opacity of the legend}

\item{trim}{should the raster be trimmed in case there are NAs on the egdes}

\item{verbose}{should some details be printed during the process}

\item{...}{additional arguments passed on to repective functions.
See \code{\link{addRasterImage}}, \code{\link{addCircles}},
\code{\link{addPolygons}}, \code{\link{addPolylines}} for details}

\item{zcol}{attribute name(s) or column number(s) in attribute table
of the column(s) to be rendered}

\item{burst}{whether to show all (TRUE) or only one (FALSE) layers}

\item{radius}{attribute name(s) or column number(s) in attribute table
of the column(s) to be used for defining the size of circles}

\item{weight}{line width (see \code{\link{leaflet}} for details)}

\item{easter.egg}{well, you might find out if you set this to TRUE}
}
\description{
this function produces an interactive GIS-like view of the specified
spatial object(s) on top of the specified base maps.
}
\section{Methods (by class)}{
\itemize{
\item \code{RasterLayer}: \code{\link{raster}}

\item \code{RasterStack}: \code{\link{stack}}

\item \code{RasterBrick}: \code{\link{brick}}

\item \code{Satellite}: \code{\link{satellite}}

\item \code{SpatialPixelsDataFrame}: \code{\link{SpatialPixelsDataFrame}}

\item \code{SpatialPointsDataFrame}: \code{\link{SpatialPointsDataFrame}}

\item \code{SpatialPoints}: \code{\link{SpatialPoints}}

\item \code{SpatialPolygonsDataFrame}: \code{\link{SpatialPolygonsDataFrame}}

\item \code{SpatialPolygons}: \code{\link{SpatialPolygons}}

\item \code{SpatialLinesDataFrame}: \code{\link{SpatialLinesDataFrame}}

\item \code{SpatialLines}: \code{\link{SpatialLines}}

\item \code{missing}: initiate a map without an object
}}
\examples{
\dontrun{
mapView()

### raster data ###
library(sp)
library(raster)

data(meuse.grid)
coordinates(meuse.grid) = ~x+y
proj4string(meuse.grid) <- CRS("+init=epsg:28992")
gridded(meuse.grid) = TRUE
meuse_rst <- stack(meuse.grid)

m1 <- mapView(meuse_rst)
m1

# factorial RasterLayer
m2 <- mapView(raster::as.factor(meuse_rst[[4]]))
m2



### point vector data ###
## SpatialPointsDataFrame ##
data(meuse)
coordinates(meuse) <- ~x+y
proj4string(meuse) <- CRS("+init=epsg:28992")

# all layers of meuse
mapView(meuse, burst = TRUE)

# only one layer, all info in popups
mapView(meuse, burst = FALSE)

## SpatialPoints ##
meuse_pts <- as(meuse, "SpatialPoints")
mapView(meuse_pts)



### overlay vector on top of raster ###
m3 <- mapView(meuse, map = slot(m2, "map"))
m3

m4 <- mapView(meuse, map = slot(m2, "map"), burst = TRUE)
m4 # is the same as
m5 <- addMapLayer(meuse, slot(m2, "map"), burst = TRUE)
m5



### polygon vector data ###
data("DEU_admin2")
m <- mapView(DEU_admin2, burst = FALSE)
m

## points on polygons ##
centres <- data.frame(coordinates(DEU_admin2))
names(centres) <- c("x", "y")
coordinates(centres) <- ~ x + y
projection(centres) <- projection(DEU_admin2)
addMapLayer(centres, map = slot(m, "map"))



### lines vector data
data("atlStorms2005")
mapView(atlStorms2005, burst = FALSE)
mapView(atlStorms2005, burst = TRUE)
}
}
\author{
Tim Appelhans
}

